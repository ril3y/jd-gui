name: Auto Version and Release

on:
  push:
    branches:
      - master
    paths-ignore:
      - 'README.md'
      - '.github/**'
      - '*.md'

jobs:
  auto-version:
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[skip version]')"

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
        submodules: recursive

    - name: Set up JDK 8
      uses: actions/setup-java@v4
      with:
        java-version: '8'
        distribution: 'temurin'

    - name: Get current version
      id: current_version
      run: |
        VERSION=$(grep "rootProject.version=" build.gradle | cut -d "'" -f 2)
        echo "current=$VERSION" >> $GITHUB_OUTPUT
        echo "Current version: $VERSION"

    - name: Determine version bump type
      id: version_type
      run: |
        if [[ "${{ github.event.head_commit.message }}" == *"[major]"* ]]; then
          echo "type=major" >> $GITHUB_OUTPUT
        elif [[ "${{ github.event.head_commit.message }}" == *"[minor]"* ]] || [[ "${{ github.event.head_commit.message }}" == *"feat"* ]] || [[ "${{ github.event.head_commit.message }}" == *"feature"* ]]; then
          echo "type=minor" >> $GITHUB_OUTPUT
        else
          echo "type=patch" >> $GITHUB_OUTPUT
        fi

    - name: Calculate new version
      id: new_version
      run: |
        current="${{ steps.current_version.outputs.current }}"
        type="${{ steps.version_type.outputs.type }}"

        # Extract version parts (assuming format like 1.6.7-enhanced)
        base_version=$(echo "$current" | cut -d'-' -f1)
        suffix=$(echo "$current" | cut -d'-' -f2-)

        IFS='.' read -ra VERSION_PARTS <<< "$base_version"
        major=${VERSION_PARTS[0]}
        minor=${VERSION_PARTS[1]}
        patch=${VERSION_PARTS[2]}

        case $type in
          major)
            major=$((major + 1))
            minor=0
            patch=0
            ;;
          minor)
            minor=$((minor + 1))
            patch=0
            ;;
          patch)
            patch=$((patch + 1))
            ;;
        esac

        if [[ "$current" == *"-"* ]]; then
          new_version="${major}.${minor}.${patch}-${suffix}"
        else
          new_version="${major}.${minor}.${patch}"
        fi

        echo "version=$new_version" >> $GITHUB_OUTPUT
        echo "tag=v$new_version" >> $GITHUB_OUTPUT
        echo "New version: $new_version"

    - name: Update version in build.gradle
      run: |
        sed -i "s/rootProject.version='[^']*'/rootProject.version='${{ steps.new_version.outputs.version }}'/" build.gradle
        echo "Updated build.gradle with version ${{ steps.new_version.outputs.version }}"

    - name: Initialize submodules
      run: |
        git submodule init
        git submodule update

    - name: Build project
      run: ./gradlew build --no-daemon

    - name: Build Windows executable
      run: ./gradlew buildExe --no-daemon

    - name: Run tests
      env:
        VIRUSTOTAL_API_KEY: ${{ secrets.VIRUSTOTAL_API_KEY }}
      run: ./gradlew test --no-daemon

    - name: Commit version bump
      run: |
        git config --local user.email "rileyporter@gmail.com"
        git config --local user.name "Auto Version Bot"
        git add build.gradle
        git commit -m "ðŸš€ Auto version bump to ${{ steps.new_version.outputs.version }} [skip ci]

        Automatically bumped version from ${{ steps.current_version.outputs.current }} to ${{ steps.new_version.outputs.version }}
        Bump type: ${{ steps.version_type.outputs.type }}

        ðŸ¤– Generated with [Claude Code](https://claude.ai/code)" || exit 0

    - name: Create and push tag
      run: |
        git tag -a "${{ steps.new_version.outputs.tag }}" -m "JD-GUI Enhanced ${{ steps.new_version.outputs.tag }}

        ðŸš€ Auto-generated release

        Enhanced Features:
        - SHA-256 Hash Generation with clipboard integration
        - VirusTotal API Integration for malware detection
        - Bulk Security Scanning with multi-select support
        - Windows Executable generation with Launch4j
        - Consolidated Architecture eliminating code duplication

        This is an automatically generated release based on commits to master branch.
        Version bumped from ${{ steps.current_version.outputs.current }} to ${{ steps.new_version.outputs.version }}"

    - name: Push changes
      run: |
        git push origin master
        git push origin "${{ steps.new_version.outputs.tag }}"

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: jd-gui-${{ steps.new_version.outputs.version }}
        path: |
          build/libs/*.jar
          build/launch4j/jd-gui.exe

    outputs:
      new_version: ${{ steps.new_version.outputs.version }}
      new_tag: ${{ steps.new_version.outputs.tag }}
      should_release: ${{ steps.current_version.outputs.current != steps.new_version.outputs.version }}

  create_release:
    needs: auto-version
    runs-on: ubuntu-latest
    if: needs.auto-version.outputs.should_release == 'true'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        ref: ${{ needs.auto-version.outputs.new_tag }}

    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: jd-gui-${{ needs.auto-version.outputs.new_version }}
        path: ./artifacts/

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ needs.auto-version.outputs.new_tag }}
        release_name: JD-GUI Enhanced ${{ needs.auto-version.outputs.new_tag }}
        draft: false
        prerelease: false
        body: |
          # JD-GUI Enhanced ${{ needs.auto-version.outputs.new_tag }}

          ðŸš€ **Automatic Release** - Generated from commits to master branch

          ## Enhanced Features
          - **SHA-256 Hash Generation**: Generate cryptographic hashes for .class files
          - **VirusTotal Integration**: Direct API integration for malware detection
          - **Multi-file Processing**: Bulk security scanning with Ctrl+click multi-select
          - **Windows Executable**: Native Windows .exe with Launch4j wrapper
          - **Consolidated Architecture**: Optimized codebase with eliminated duplications

          ## Downloads
          - **Windows Executable**: `jd-gui.exe` - Ready to run on Windows
          - **Cross-Platform JAR**: `jd-gui-*.jar` - Runs on any Java 8+ environment

          ## VirusTotal Setup
          1. Get your free API key from [VirusTotal](https://www.virustotal.com/gui/my-apikey)
          2. In JD-GUI: `File > Preferences > VirusTotal`
          3. Enter your API key and set rate limiting
          4. Right-click on .class files for security analysis options

          ## Version Control
          - **Automatic Versioning**: This release was automatically generated
          - **Build Artifacts**: All files built and tested via GitHub Actions
          - **Cross-Platform**: Tested on Ubuntu, Windows, and macOS

          For detailed documentation, see the [README](https://github.com/ril3y/jd-gui/blob/master/README.md).

    - name: Upload Windows Executable
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./artifacts/jd-gui.exe
        asset_name: jd-gui.exe
        asset_content_type: application/octet-stream

    - name: Upload JAR
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./artifacts/jd-gui-${{ needs.auto-version.outputs.new_version }}.jar
        asset_name: jd-gui-${{ needs.auto-version.outputs.new_version }}.jar
        asset_content_type: application/java-archive
buildscript {
    repositories {
        mavenCentral()
        gradlePluginPortal()
    }
    dependencies {
        classpath 'net.sf.proguard:proguard-gradle:6.2.2'  // Java 8 compatible version
    }
}

plugins {
    id 'java'
    id 'distribution'
    id 'edu.sc.seis.launch4j' version '3.0.7'
    id 'com.netflix.nebula.ospackage' version '11.4.0'
}

// Common configuration //
rootProject.version='1.6.9-enhanced'
rootProject.ext.set('jdCoreVersion', '1.1.3')
targetCompatibility = '1.8'

allprojects {
    apply plugin: 'eclipse'
    apply plugin: 'idea'

    tasks.withType(JavaCompile) {
        sourceCompatibility = targetCompatibility = '1.8'
        options.compilerArgs << '-Xlint:deprecation'
        options.compilerArgs << '-Xlint:unchecked'
        options.encoding = 'UTF-8'
    }

    repositories {
        mavenCentral()
        // jcenter() no longer needed since using JD-Core submodule
    }

    configurations {
        // Updated for modern Gradle
    }
}

// 'cleanIdea' task extension //
cleanIdea.doFirst {
    delete project.name + '.iws'
    delete 'out'
    followSymlinks = true
}

// All in one JAR file //
subprojects.each { subproject ->
    evaluationDependsOn(subproject.path)
}

jar {
    dependsOn subprojects.tasks['jar']

    // Add SPI directory
    def tmpSpiDir = file('build/tmp/spi')
    from tmpSpiDir
    // Add dependencies
    def deps = []
    subprojects.each { subproject ->
        from subproject.sourceSets.main.output.classesDirs
        from subproject.sourceSets.main.output.resourcesDir
        deps += subproject.configurations.runtimeClasspath
    }
    subprojects.each { subproject ->
        deps -= subproject.jar.archivePath
    }
    deps = deps.unique().collect { it.isDirectory() ? it : zipTree(it) }
    from deps

    manifest {
        attributes 'Main-Class': 'org.jd.gui.App',
                'SplashScreen-Image': 'org/jd/gui/images/jd_icon_128.png',
                'JD-GUI-Version': project.version,
                'JD-Core-Version': project.jdCoreVersion
    }
    exclude 'META-INF/licenses/**', 'META-INF/maven/**', 'META-INF/INDEX.LIST'
    exclude '**/ErrorStrip_*.properties', '**/RSyntaxTextArea_*.properties', '**/RTextArea_*.properties'
    exclude '**/FocusableTip_*.properties', '**/RSyntaxTextArea_License.txt'
    duplicatesStrategy DuplicatesStrategy.EXCLUDE
    doFirst {
        // Create SPI directory
        tmpSpiDir.deleteDir()
        def tmpSpiServicesDir = file(tmpSpiDir.path + '/META-INF/services')
        tmpSpiServicesDir.mkdirs()
        // Copy and merge SPI config files
        subprojects.each { subproject ->
            def servicesDir = file(subproject.sourceSets.main.output.resourcesDir.path + '/META-INF/services')
            if (servicesDir.exists()) {
                servicesDir.eachFile { serviceFile ->
                    def target = file(tmpSpiServicesDir.path + '/' + serviceFile.name)
                    target << serviceFile.text
                }
            }
        }
    }
}

// Minify JAR file // - DISABLED FOR TESTING
/*
task proguard(type: proguard.gradle.ProGuardTask, dependsOn: 'jar') {
    configuration 'src/proguard/resources/proguard.config.txt'
    injars jar.archivePath
    outjars 'build/libs/' + project.name + '-' + project.version + '-min.jar'
    libraryjars System.getProperty('java.home') + '/lib/rt.jar'
    libraryjars System.getProperty('java.home') + '/jmods/'
}
*/

// Java executable wrapper for Windows //
launch4j {
    // Use the regular JAR task instead of proguard
    jarTask = project.tasks.jar

    version = project.version
    textVersion = project.version
    fileDescription = 'JD-GUI Java Decompiler'
    productName = 'JD-GUI'
    copyright = 'JD-GUI (C) 2008-2019 Emmanuel Dupuy'
    icon = projectDir.path + '/src/launch4j/resources/images/jd-gui.ico'
    bundledJrePath = '%JAVA_HOME%'
    jreMinVersion = '1.8.0'
}

// Custom task to build Windows executable easily
task buildExe {
    dependsOn createExe
    group = 'build'
    description = 'Builds Windows executable (.exe) with SHA256 hash feature'

    doLast {
        println "✅ Windows executable created successfully!"
        println "📁 Location: ${projectDir}/build/launch4j/jd-gui.exe"
        println "🚀 Ready to run on Windows!"
    }
}

// Packages for Linux // - STILL DISABLED
/*
ospackage {
    // ... disabled
}
*/

// DISTRIBUTIONS ALSO DISABLED FOR BASIC BUILD
/*
// Distributions for OSX and Windows //
distributions {
    // ... disabled
}
build.finalizedBy buildDeb
build.finalizedBy buildRpm
*/
